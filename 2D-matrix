class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //if matrix is null or has no rows in it, returning false
        if(matrix == null || matrix.length == 0){
            return false;
        }
        int m = matrix.length; //no. of rows
        int n = matrix[0].length;  //no. of columns
        int low  = 0;
        int high = m * n -1;  //number of elements -1
        while(low <= high){
            int mid = low + (high - low)/2; 
            int row = mid / n;
            int col = mid % n ;   // fing the row and col of the mid element
            if(matrix[row][col] == target){
                return true;
            }
            else if(matrix[row][col] > target){
                //if target is less than middle element, then change high to search left side
                high = mid - 1;
            }
            else{
                //if target is greater than middle , then change low to search right side
                low = mid + 1;
            }
        }
        return false;
    }
}
